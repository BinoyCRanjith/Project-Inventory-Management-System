@model OneTeamAptitudeMVC.Models.StudentViewModel

@using (Html.BeginForm("Save", "StudentJson", FormMethod.Post))
{
    @Html.HiddenFor(p => p.Id)
    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h1>User Registration</h1>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-group">
                                @Html.Label("Name :")
                                <div class="input-group">
                                    <div class="input-group-addon">
                                        <i class="fa fa-user"></i>
                                    </div>
                                    @Html.TextBoxFor(Model => Model.Name, new { @class = "form-control", @placeholder = "Type Name here" })

                                </div>
                                @Html.ValidationMessageFor(p => p.Name, "", new { @class = "text-danger", @required = "", })
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="form-group">
                                @Html.Label("Email :")
                                <div class="input-group">
                                    <div class="input-group-addon">
                                        <i class="fa fa-envelope"></i>
                                    </div>
                                    @Html.TextBoxFor(Model => Model.Email, new { @class = "form-control", @placeholder = "Type Email here" })
                                </div>
                                @Html.ValidationMessageFor(p1 => p1.Email, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="form-group">
                                @Html.Label("Phone :")
                                <div class="input-group">
                                    <div class="input-group-addon">
                                        <i class="fa fa-phone-square"></i>
                                    </div>
                                    @Html.TextBoxFor(Model => Model.Phone, new { @class = "form-control", @placeholder = "Type Phone No here" })
                                </div> @Html.ValidationMessageFor(p => p.Phone, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="form-group">
                                @Html.Label("User Roll :")
                                <div class="input-group">
                                    <div class="input-group-addon">
                                        <i class="fa fa-vcard"></i>
                                    </div>
                                    @Html.DropDownListFor(Model => Model.RollId, new SelectList(ViewBag.UserRoll, "RollId", "RollName"), "select", new { @class = "form-control input-lg" })
                                </div>@Html.ValidationMessageFor(p => p.RollId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="form-group">
                                @Html.Label("Department :")
                                <div class="input-group">
                                    <div class="input-group-addon">
                                        <i class="fa fa-graduation-cap"></i>
                                    </div>
                                    @Html.DropDownListFor(Model => Model.DepartmentId, new SelectList(ViewBag.UserDepartment, "DepartmentId", "DepartmentName"), "select", new { @class = "form-control input-lg", @onchange = "VisibleEditButton(this.value)" })
                                </div>
                                @Html.ValidationMessageFor(p => p.DepartmentId, "", new { @class = "text-danger" })
                                <div id="SpanEditDeleteAdd" style="margin-top:5px;">
                                    <input id="BtnAddNew" type="button" value="Add" class="btn btn-success" onclick="VisibleeditSpan(0)" />

                                    <input id="BtnEdit" type="button" value="Edit" class="btn btn-primary" onclick="VisibleeditSpan(1)" style="visibility: hidden" />

                                    <input id="BtnDelete" type="button" value="Delete" class="btn btn-danger" onclick="DeleteDepartment()" style="visibility: hidden" />
                                </div>



                                <div style="visibility: hidden" id="SpanEditAddDeptSave">
                                    <div class="input-group">
                                        <div class="input-group-addon">
                                            <i class="fa fa-chain"></i>
                                        </div>
                                        <input id="txtDepartment" placeholder="Type Here!" class="form-control" type="text" />
                                    </div>
                                    <input id="BtnDeptSave" type="button" value="Save" class="btn btn-success" onclick="SaveDept()" />

                                    <input id="BtnDeptCancel" type="button" value="cancel" class="btn btn-danger" onclick="hiddenAddNewSpan()" />

                                </div>

                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="form-group">
                                @Html.Label("Password :")
                                <div class="input-group">
                                    <div class="input-group-addon">
                                        <i class="fa fa-vcard"></i>
                                    </div>
                                    @Html.TextBoxFor(Model => Model.Password, new { @class = "form-control", @placeholder = "Password", @required = "", @pattern = @"(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}", @title = "Must contain at least one number and one uppercase and lowercase letter, and at least 8 or more characters" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="form-group">
                                <input type="submit" value="submit" class="btn btn-success" style="padding-top:5px;" />

                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
}


@section scripts
{
    <script>
        function DeleteCat() {
            var retVal = confirm("Do you want to Delete ?");
            if (retVal == true) {
                Myvar = document.getElementById('CatagoryId').value;
                Or: __doPostBack(Myvar, "DeleteCat");

            }

        }
        function VisibleEditButton() {
            document.getElementById('BtnEdit').style.visibility = "visible";
            document.getElementById('BtnDelete').style.visibility = "visible";

        }
        function VisibleeditSpan(a) {
            document.getElementById('SpanEditDeleteAdd').style.visibility = "hidden";
            document.getElementById('BtnEdit').style.visibility = "hidden";
            document.getElementById('BtnDelete').style.visibility = "hidden";
            document.getElementById('SpanEditAddDeptSave').style.visibility = "visible";
            if (a == 1) {
                var skillsSelect = document.getElementById("CatagoryId");
                var selectedText = skillsSelect.options[skillsSelect.selectedIndex].text;
                document.getElementById("txtCat").value = selectedText;
                editIndicator = "true";
            }



        }
        function hiddenAddNewSpan() {
            document.getElementById('SpanEditAddDeptSave').style.visibility = "hidden";
            document.getElementById('SpanEditDeleteAdd').style.visibility = "visible";




            editIndicator = "false";

        }

        function SaveDept() {
            if (editIndicator == "false") {
                Myvar = document.getElementById('CatagoryId').value;
                Or: __doPostBack(Myvar, "SaveCat");
            }
            else if (editIndicator == "true") {
                Myvar = document.getElementById('CatagoryId').value;
                Or: __doPostBack(Myvar, "UpdateCat");
                editIndicator = "false";

            }

            //document.getElementById("ContentPlaceHolder1_txtDepartment").value = "";
            document.getElementById('SpanEditAddDeptSave').style.visibility = "hidden";

        }
        function EditQns(d) {
            Or: __doPostBack(d, "editQn");

        }
    </script>
}
